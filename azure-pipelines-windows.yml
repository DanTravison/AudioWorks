trigger:
  branches:
    include:
    - master
    - dev
  paths:
    exclude:
    - .gitignore.txt
    - README.md
    - LICENSE
    - azure-pipelines-linux.yml
    - azure-pipelines-macos.yml

pr:
    - dev

pool:
  vmImage: 'windows-latest'

variables:
  buildConfiguration: 'Release'
  disable.coverage.autogenerate: 'true'
  system.debug: 'true'

steps:
- task: NuGetToolInstaller@1
  displayName: 'Update NuGet tools'

- task: DotNetCoreCLI@2
  inputs:
    command: 'restore'
    projects: 'AudioWorks\AudioWorks.sln'
  displayName: 'Restore dependencies'

- task: DotNetCoreCLI@2
  inputs:
    command: 'build'
    projects: 'AudioWorks\AudioWorks.sln'
    arguments: '--configuration $(buildConfiguration)'
  displayName: 'Build $(buildConfiguration) configuration'

- task: DotNetCoreCLI@2
  inputs:
    command: 'pack'
    packagesToPack: '**\Extensions\**\*.csproj'
    packDirectory: '$(Build.ArtifactStagingDirectory)\prereleases\extensions'
    configurationToPack: $(buildConfiguration)
    nobuild: 'true'
    buildProperties: 'VersionSuffix="pre.$(Build.BuildId)"'
  condition: and(succeeded(), eq(variables['Build.SourceBranch'], 'refs/heads/dev'))
  displayName: 'Package pre-release extensions'

- powershell: |
    $ProgressPreference = 'SilentlyContinue'
    Invoke-WebRequest -Uri https://dist.nuget.org/win-x86-commandline/latest/nuget.exe -OutFile nuget.exe
    Invoke-WebRequest -Uri https://audioworks.blob.core.windows.net/prerequisites/AppleApplicationSupport.msi -OutFile AppleApplicationSupport.msi
    Invoke-WebRequest -Uri https://audioworks.blob.core.windows.net/prerequisites/AppleApplicationSupport64.msi -OutFile AppleApplicationSupport64.msi
  displayName: 'Download prerequisites'

- script: |
    COPY /Y nuget.exe %USERPROFILE%
    msiexec /i AppleApplicationSupport.msi /qb-
    msiexec /i AppleApplicationSupport64.msi /qb-
  displayName: 'Install prerequisites'

- powershell: Write-Host echo "##vso[task.setvariable variable=localAppDataDir]$([System.Environment]::GetFolderPath(28))\AudioWorks"
  displayName: Set local application data directory

- powershell: |
    $localFeedDir = (New-Item "$($env:LOCALAPPDATADIR)\LocalFeed" -ItemType Directory).FullName
    Get-ChildItem -Path AudioWorks\src\Extensions -Filter *.nupkg -Recurse | Select-Object -ExpandProperty FullName | % { &"$env:USERPROFILE\nuget" add $_ -Source $localFeedDir -Expand -NonInteractive }
    $roamingAppDir = "$([System.Environment]::GetFolderPath(26))\AudioWorks"
    New-Item $roamingAppDir -ItemType Directory
    $content = Get-Content AudioWorks\src\AudioWorks.Common\settings.json | ConvertFrom-Json
    $content.EnableTelemetry = $false
    $content.ExtensionRepository = $localFeedDir
    $content | ConvertTo-Json | Set-Content "$roamingAppDir\settings.json"
    dotnet test AudioWorks\tests\AudioWorks.Api.Tests --no-build --configuration $env:BUILDCONFIGURATION --filter "FullyQualifiedName=AudioWorks.Api.Tests.AudioFileTests.HasExpectedPath"
  displayName: 'Install built extensions'

- task: DotNetCoreCLI@2
  inputs:
    command: 'test'
    projects: 'AudioWorks\AudioWorks.sln'
    publishTestResults: 'true'
    testRunTitle: '.NET Core 3.1'
    arguments: '--framework netcoreapp3.1 --configuration $(buildConfiguration) --no-build --collect:"XPlat Code Coverage" --settings AudioWorks\netcoreapp3.1.coverlet.runsettings'
  displayName: 'Test on .NET Core 3.1'

- task: DotNetCoreCLI@2
  inputs:
    command: 'test'
    projects: 'AudioWorks\AudioWorks.sln'
    publishTestResults: 'true'
    testRunTitle: '.NET Core 2.1'
    arguments: '--framework netcoreapp2.1 --configuration $(buildConfiguration) --no-build --collect:"XPlat Code Coverage" --settings AudioWorks\netcoreapp2.1.coverlet.runsettings'
  displayName: 'Test on .NET Core 2.1'

- task: DotNetCoreCLI@2
  inputs:
    command: 'test'
    projects: 'AudioWorks\AudioWorks.sln'
    publishTestResults: 'true'
    testRunTitle: '.NET Framework 4.8'
    arguments: '--framework net462 --configuration $(buildConfiguration) --no-build'
  displayName: 'Test on .NET Framework 4.8'

- task: Palmmedia.reportgenerator.reportgenerator-build-release-task.reportgenerator@4
  inputs:
    reports: '$(Agent.TempDirectory)\*\coverage.cobertura.xml'
    targetdir: 'reports\coverage'
    reporttypes: 'HtmlInline_AzurePipelines;Cobertura'
  displayName: 'Generate code coverage results'

- task: PublishCodeCoverageResults@1
  inputs:
    codecoverageTool: 'cobertura'
    summaryFileLocation: '$(Build.SourcesDirectory)\reports\coverage\Cobertura.xml'
    reportDirectory: '$(Build.SourcesDirectory)\reports\coverage'
  displayName: 'Publish code coverage results'

- task: CopyFiles@2
  inputs:
    contents: |
      AudioWorks\src\*\bin\$(buildConfiguration)\*.nupkg
      AudioWorks\src\*\bin\$(buildConfiguration)\*.snupkg
    targetFolder: '$(Build.ArtifactStagingDirectory)\releases\core'
    flattenFolders: true
  condition: and(succeeded(), eq(variables['Build.SourceBranch'], 'refs/heads/master'))
  displayName: 'Copy core libraries to artifacts directory'

- task: CopyFiles@2
  inputs:
    contents: 'AudioWorks\src\Extensions\**\*.nupkg'
    targetFolder: '$(Build.ArtifactStagingDirectory)\releases\extensions'
    flattenFolders: true
  condition: and(succeeded(), eq(variables['Build.SourceBranch'], 'refs/heads/master'))
  displayName: 'Copy extensions to artifacts directory'

- task: CopyFiles@2
  inputs:
    contents: 'AudioWorks\src\AudioWorks.Commands\bin\$(buildConfiguration)\AudioWorks.Commands\**'
    targetFolder: '$(Build.ArtifactStagingDirectory)\releases\module'
  condition: and(succeeded(), eq(variables['Build.SourceBranch'], 'refs/heads/master'))
  displayName: 'Copy PowerShell module to artifacts directory'

- task: PublishBuildArtifacts@1
  displayName: 'Publish artifacts'