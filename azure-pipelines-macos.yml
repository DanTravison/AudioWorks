trigger:
  branches:
    include:
    - master
    - dev
  paths:
    exclude:
    - .gitignore.txt
    - README.md
    - LICENSE
    - azure-pipelines-windows.yml
    - azure-pipelines-linux.yml

pr:
    - dev

pool:
  vmImage: 'macOS-latest'

variables:
  buildConfiguration: 'Release'
  disable.coverage.autogenerate: 'true'

steps:
- task: UseDotNet@2
  inputs:
    packageType: sdk
    version: 2.1.x
  displayName: 'Install .NET Core 2.1 SDK'

- task: UseDotNet@2
  inputs:
    packageType: sdk
    version: 3.1.x
  displayName: 'Use .NET Core 3.1 SDK'

- task: DotNetCoreCLI@2
  inputs:
    command: 'build'
    projects: 'AudioWorks/AudioWorks.sln'
    arguments: '--configuration $(buildConfiguration)'
  displayName: 'Build $(buildConfiguration) configuration'

- task: DotNetCoreCLI@2
  inputs:
    command: pack
    packagesToPack: '**/Extensions/**/*.csproj'
    packDirectory: '$(Build.ArtifactStagingDirectory)/prereleases/extensions'
    configurationToPack: $(buildConfiguration)
    nobuild: 'true'
    buildProperties: 'VersionSuffix="pre.$(Build.BuildId)"'
  condition: and(succeeded(), eq(variables['Build.SourceBranch'], 'refs/heads/dev'))
  displayName: 'Package extensions'

- script: |
    sudo curl -o /usr/local/bin/nuget.exe https://dist.nuget.org/win-x86-commandline/latest/nuget.exe
  displayName: 'Download and install prerequisites'

- powershell: Write-Host echo "##vso[task.setvariable variable=localAppDataDir]$([System.Environment]::GetFolderPath(28))/AudioWorks"
  displayName: Set local application data directory

- powershell: |
    $localFeedDir = (New-Item "$env:LOCALAPPDATADIR/LocalFeed" -ItemType Directory).FullName
    Get-ChildItem -Path AudioWorks/src/Extensions -Filter *.nupkg -Recurse | Select-Object -ExpandProperty FullName | % { mono /usr/local/bin/nuget.exe add $_ -Source $localFeedDir -Expand -NonInteractive -Verbosity Normal }
    $roamingAppDir = "$([System.Environment]::GetFolderPath(26))/AudioWorks"
    New-Item $roamingAppDir -ItemType Directory
    $content = Get-Content AudioWorks/src/AudioWorks.Common/settings.json | ConvertFrom-Json
    $content.EnableTelemetry = $false
    $content.ExtensionRepository = $localFeedDir
    $content | ConvertTo-Json | Set-Content "$roamingAppDir/settings.json"
    dotnet test AudioWorks/tests/AudioWorks.Api.Tests --no-build --configuration $env:BUILDCONFIGURATION --filter "FullyQualifiedName=AudioWorks.Api.Tests.AudioFileTests.HasExpectedPath"
    Write-Host
    Write-Host "Installed files:"
    Get-ChildItem -File -Recurse $env:LOCALAPPDATADIR/Extensions | Select-Object -ExpandProperty FullName
  displayName: 'Install extensions'

- powershell: |
    (Get-Content -path netcoreapp3.1.runsettings -Raw) -replace "%LOCALAPPDATADIR%", $env:LOCALAPPDATADIR -replace "%BUILD_SOURCESDIRECTORY%", $env:BUILD_SOURCESDIRECTORY -replace "%BUILDCONFIGURATION%", $env:BUILDCONFIGURATION | Set-Content -Path netcoreapp3.1.runsettings
    Write-Host "netcoreapp3.1.runsettings:"
    Get-Content -path netcoreapp3.1.runsettings
    (Get-Content -path netcoreapp2.1.runsettings -Raw) -replace "%LOCALAPPDATADIR%", $env:LOCALAPPDATADIR -replace "%BUILD_SOURCESDIRECTORY%", $env:BUILD_SOURCESDIRECTORY -replace "%BUILDCONFIGURATION%", $env:BUILDCONFIGURATION | Set-Content -Path netcoreapp2.1.runsettings
    Write-Host "netcoreapp2.1.runsettings:"
    Get-Content -path netcoreapp2.1.runsettings
  displayName: 'Pre-process runsettings for code coverage'

- task: DotNetCoreCLI@2
  inputs:
    command: 'test'
    projects: 'AudioWorks/AudioWorks.sln'
    publishTestResults: 'true'
    testRunTitle: '.NET Core 3.1'
    arguments: '--framework netcoreapp3.1 --configuration $(buildConfiguration) --no-build --collect:"XPlat Code Coverage" --settings "$(Build.SourcesDirectory)/netcoreapp3.1.runsettings"'
  displayName: 'Test on .NET Core 3.1'

- task: DotNetCoreCLI@2
  inputs:
    command: 'test'
    projects: 'AudioWorks/AudioWorks.sln'
    publishTestResults: 'true'
    testRunTitle: '.NET Core 2.1'
    arguments: '--framework netcoreapp2.1 --configuration $(buildConfiguration) --no-build --collect:"XPlat Code Coverage" --settings "$(Build.SourcesDirectory)/netcoreapp2.1.runsettings"'
  displayName: 'Test on .NET Core 2.1'

- task: Palmmedia.reportgenerator.reportgenerator-build-release-task.reportgenerator@4
  inputs:
    reports: '$(Agent.TempDirectory)/*/coverage.cobertura.xml'
    targetdir: 'reports/coverage'
    reporttypes: 'HtmlInline_AzurePipelines;Cobertura'
  displayName: 'Generate code coverage results'

- task: PublishCodeCoverageResults@1
  inputs:
    codecoverageTool: 'cobertura'
    summaryFileLocation: '$(Build.SourcesDirectory)/reports/coverage/Cobertura.xml'
    reportDirectory: '$(Build.SourcesDirectory)/reports/coverage'
  displayName: 'Publish code coverage results'

- task: CopyFiles@2
  inputs:
    contents: 'AudioWorks/src/Extensions/**/*.nupkg'
    targetFolder: '$(Build.ArtifactStagingDirectory)/releases/extensions'
    flattenFolders: 'true'
  condition: and(succeeded(), eq(variables['Build.SourceBranch'], 'refs/heads/master'))
  displayName: 'Copy extensions to artifacts directory'

- task: PublishBuildArtifacts@1
  displayName: 'Publish artifacts'