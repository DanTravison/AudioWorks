trigger:
  branches:
    include:
    - master
  paths:
    exclude:
    - .gitignore.txt
    - README.md
    - LICENSE
    - azure-pipelines-windows.yml
    - azure-pipelines-linux.yml

pool:
  vmImage: 'macOS-10.13'

variables:
  buildConfiguration: 'Release-OSX'

steps:
- script: |
    dotnet build AudioWorks/AudioWorks.sln --configuration $(buildConfiguration)
  displayName: 'Build $(buildConfiguration) configuration'

- script: |
    dotnet tool install --global dotnet-reportgenerator-globaltool
  displayName: 'Install prerequisites'

- powershell: |
    $settingsDir = "$([System.Environment]::GetFolderPath(28))/AudioWorks"
    $localFeedDir = (New-Item "$settingsDir/LocalFeed" -ItemType Directory).FullName
    Get-ChildItem -Path AudioWorks/src/Extensions -Filter *.nupkg -Recurse | Select-Object -ExpandProperty FullName | % { nuget add $_ -Source $localFeedDir -NonInteractive }
    $content = Get-Content AudioWorks/src/AudioWorks.Common/settings.json | ConvertFrom-Json
    $content.EnableTelemetry = $false
    $content.ExtensionRepository = $localFeedDir
    $content | ConvertTo-Json | Set-Content "$settingsDir/settings.json"
    Get-ChildItem -Path AudioWorks/tests -Filter *.Tests -Directory | % { dotnet test --no-build $_.FullName --logger trx --configuration $env:buildConfiguration --no-build /p:CollectCoverage=true /p:CoverletOutputFormat=cobertura /p:CoverletOutput=./coverage.netcoreapp2.1.xml /p:Exclude="[AudioWorks.*.Tests]*%2c[AudioWorks.TestUtilities]*%2c[*]JetBrains.Annotations.*" /p:IncludeDirectory="$settingsDir/Extensions/netcoreapp2.1/*%2cAudioWorks.Commands\netcoreapp2.1" }
  displayName: 'Run tests'

- task: PublishTestResults@2
  inputs:
    testRunner: xUnit
    testResultsFiles: '**/*.trx'
  displayName: 'Publish test results'

- script: |
    $HOME/.dotnet/tools/reportgenerator -reports:AudioWorks/tests/*/coverage.*.xml -targetdir:Reports/Cobertura -reporttypes:Cobertura
    $HOME/.dotnet/tools/reportgenerator -reports:Reports/Cobertura/Cobertura.xml -targetdir:Reports/HTML "-reporttypes:HTMLInline;HTMLChart"
  displayName: 'Generate code coverage results'

- task: PublishCodeCoverageResults@1
  inputs:
    codecoverageTool: cobertura
    summaryFileLocation: $(Build.SourcesDirectory)/Reports/Cobertura/Cobertura.xml
    reportDirectory: $(Build.SourcesDirectory)/Reports/HTML
  displayName: 'Publish code coverage results'

- task: CopyFiles@2
  inputs:
    contents: 'AudioWorks/src/Extensions/**/*.nupkg'
    targetFolder: $(Build.ArtifactStagingDirectory)
  displayName: 'Copy artifacts to staging directory'

- task: PublishBuildArtifacts@1
  displayName: 'Publish artifacts'