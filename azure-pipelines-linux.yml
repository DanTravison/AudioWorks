trigger:
  branches:
    include:
    - master
    - dev
  paths:
    exclude:
    - .gitignore.txt
    - README.md
    - LICENSE
    - azure-pipelines-windows.yml
    - azure-pipelines-macos.yml

pr:
    - dev

pool:
  vmImage: ubuntu-latest

variables:
  buildConfiguration: Release

steps:
- task: UseDotNet@2
  inputs:
    packageType: runtime
    version: 2.1.x
  displayName: 'Install .NET Core 2.1 runtime'

- task: UseDotNet@2
  inputs:
    packageType: runtime
    version: 3.1.x
  displayName: 'Install .NET Core 3.1 runtime'

- task: DotNetCoreCLI@2
  inputs:
    command: build
    projects: 'AudioWorks/AudioWorks.sln'
    arguments: '--configuration $(buildConfiguration)'
  displayName: 'Build $(buildConfiguration) configuration'

- task: DotNetCoreCLI@2
  inputs:
    command: pack
    packagesToPack: '**/Extensions/**/*.csproj'
    packDirectory: '$(Build.ArtifactStagingDirectory)/prereleases/extensions'
    configurationToPack: $(buildConfiguration)
    nobuild: true
    buildProperties: 'VersionSuffix="pre.$(Build.BuildId)"'
  condition: and(succeeded(), eq(variables['Build.SourceBranch'], 'refs/heads/dev'))
  displayName: 'Package pre-release extension packages'

- script: |
    sudo curl -o /usr/local/bin/nuget.exe https://dist.nuget.org/win-x86-commandline/latest/nuget.exe
    sudo apt-get install --yes libflac8 libvorbisenc2 libmp3lame0 libopus0 libebur128-1
    sudo updatedb
    dotnet tool install --global dotnet-reportgenerator-globaltool
  displayName: 'Install prerequisites'

- powershell: |
    $localAppDir = "$([System.Environment]::GetFolderPath(28))\AudioWorks"
    $localFeedDir = (New-Item "$localAppDir/LocalFeed" -ItemType Directory).FullName
    Get-ChildItem -Path AudioWorks/src/Extensions -Filter *.nupkg -Recurse | Select-Object -ExpandProperty FullName | % { mono /usr/local/bin/nuget.exe add $_ -Source $localFeedDir -Expand -NonInteractive }
    $roamingAppDir = "$([System.Environment]::GetFolderPath(26))/AudioWorks"
    New-Item $roamingAppDir -ItemType Directory
    $content = Get-Content AudioWorks/src/AudioWorks.Common/settings.json | ConvertFrom-Json
    $content.EnableTelemetry = $false
    $content.ExtensionRepository = $localFeedDir
    $content | ConvertTo-Json | Set-Content "$roamingAppDir/settings.json"
    dotnet test AudioWorks/tests/AudioWorks.Api.Tests --no-build --configuration $env:BUILDCONFIGURATION --filter "FullyQualifiedName=AudioWorks.Api.Tests.AudioFileTests.HasExpectedPath"
    $testResult = 0
    Get-ChildItem -Path AudioWorks/tests -Filter *.Tests -Directory | % { dotnet test $_.FullName --no-build --logger trx --framework netcoreapp3.1 --configuration $env:BUILDCONFIGURATION /p:CollectCoverage=true /p:CoverletOutputFormat=cobertura /p:Exclude="[AudioWorks.*.Tests]*%2c[AudioWorks.TestUtilities]*%2c[xunit.*]*" /p:IncludeDirectory="$localAppDir/Extensions/netcoreapp3.1/*%2c$($_.FullName)/bin/$($env:BUILDCONFIGURATION)/AudioWorks.Commands/netcoreapp3.1"; if ($LastExitCode -ne 0) { $testResult = $LastExitCode } }
    Get-ChildItem -Path AudioWorks/tests -Filter *.Tests -Directory | % { dotnet test $_.FullName --no-build --logger trx --framework netcoreapp2.1 --configuration $env:BUILDCONFIGURATION /p:CollectCoverage=true /p:CoverletOutputFormat=cobertura /p:Exclude="[AudioWorks.*.Tests]*%2c[AudioWorks.TestUtilities]*%2c[xunit.*]*" /p:IncludeDirectory="$localAppDir/Extensions/netcoreapp2.1/*%2c$($_.FullName)/bin/$($env:BUILDCONFIGURATION)/AudioWorks.Commands/netcoreapp2.1"; if ($LastExitCode -ne 0) { $testResult = $LastExitCode } }
    exit $testResult
  displayName: 'Run tests'

- task: PublishTestResults@2
  inputs:
    testRunner: VSTest
    testResultsFiles: '**/*.trx'
  displayName: 'Publish test results'
  condition: succeededOrFailed()

- script: |
    reportgenerator -reports:AudioWorks/tests/*/coverage.*.xml -targetdir:Reports/Cobertura -reporttypes:Cobertura
  displayName: 'Generate code coverage results'

- task: PublishCodeCoverageResults@1
  inputs:
    codecoverageTool: cobertura
    summaryFileLocation: $(Build.SourcesDirectory)/Reports/Cobertura/Cobertura.xml
  displayName: 'Publish code coverage results'

- task: CopyFiles@2
  inputs:
    contents: 'AudioWorks/src/Extensions/**/*.nupkg'
    targetFolder: '$(Build.ArtifactStagingDirectory)/releases/extensions'
    flattenFolders: true
  condition: and(succeeded(), eq(variables['Build.SourceBranch'], 'refs/heads/master'))
  displayName: 'Copy extensions to artifacts directory'

- task: PublishBuildArtifacts@1
  displayName: 'Publish artifacts'